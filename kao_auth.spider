use angular;
use console;

angular.module('kao.auth', ['kao.utils'])
    .value('userEvents', {login: 'user-login',
                          update: 'user-update',
                          logout: 'user-logout'})
    .provider('AuthConfig', fn() {
        this.configure = fn(config) {
            for key, value of config {
                this[key] = value;
            }
        };
        
        this.$get = fn() {
            return this;
        };
    })
    .factory('login', fn($location, AuthConfig) {
        return fn() {
            return $location.path(AuthConfig.loginRoute);
        };
    })
    .service('UserService', fn($http, $window, $rootScope, AuthConfig, KaoDefer, login, userEvents) {
        var user = undefined;
        var responseHandler = fn(promise, event) {
            var deferred = KaoDefer();
            promise.success(fn(data) {
                if (data.error) {
                    deferred.reject(data.error);
                } else {
                    user = data.user;
                    $window.localStorage.token = data.token;
                    $rootScope.$broadcast(event, user);
                    deferred.resolve(user);
                }
            }).error(fn(error) {
                deferred.reject(error);
            });
            return deferred.promise;
        };
        this.login = fn (loginInfo) {
            return responseHandler($http.post(AuthConfig.loginApi, loginInfo), userEvents.login);
        };
        this.register = fn (user) {
            return responseHandler($http.post(AuthConfig.usersApi, user), userEvents.login);
        };
        this.update = fn (user) {
            return responseHandler($http.put(AuthConfig.currentUserApi, user), userEvents.update);
        };
        this.logout = fn () {
            delete $window.localStorage.token;
            user = undefined;
            $rootScope.$broadcast(userEvents.logout);
            login();
        };
        this.isLoggedIn = fn () {
            return $window.localStorage.token?;
        };
        this.withUser = fn () {
            var deferred = KaoDefer();
            if this.isLoggedIn() && !user? {
                $http.get(AuthConfig.currentUserApi).success(fn(data) {
                    user = data.user;
                    deferred.resolve(user);
                }).error(fn(error) {
                    deferred.reject(error);
                });
            } else {
                deferred.resolve(user);
            }
            return deferred.promise;
        };
    })
    .service('AuthRejected', fn ($location, login) {
        return {
            toLogin: fn () {
                var returnToPath = $location.path();
                login().search('returnTo', returnToPath);
            }
        };
    })
    .factory('authInterceptor', fn ($rootScope, $q, $window, AuthRejected) {
        return {
            request: fn (config) {
                config.headers = config.headers ?? {};
                if ($window.localStorage.token) {
                    config.headers.Authorization = 'Bearer ' + $window.localStorage.token;
                }
                return config;
            },
            responseError: fn (rejection) {
                if (rejection.status == 401) {
                    AuthRejected.toLogin();
                }
                return $q.reject(rejection);
            }
        };
    })
    .service('requireAuth', fn(UserService, AuthRejected) {
        return fn(event) {
            if (!UserService.isLoggedIn()) {
                event.preventDefault();
                AuthRejected.toLogin();
            }
        };
    })
    .config(fn ($httpProvider) {
        $httpProvider.interceptors.push('authInterceptor');
    });